#==========================================================================#
#== BASIC TEMPLATE FOR FCS in DIFFUSION4                                 ==#
#==========================================================================#

##################################################################
# simulation setup
##################################################################
# random number generator for simulation
simulation.rng=taus2
# duration of the simulation in seconds
simulation.duration=10
# simulation timestep in seconds
simulation.timestep=1e-6
# prefix for all output files tosystempathseparator() converts \ and / to your locally valid filename separator

##################################################################
# setup all brownian objects ("supergroup")
##################################################################
# spherical volume with 5 micrometer radius
brownian.volume_shape=sphere 
brownian.sim_radius=5
# if not specified differently, 2nM fluorophores in the sim-box
brownian.c_fluor=2
# fluorophore is al488
brownian.init_fluorophor=al488
# no rotational diffusion
brownian.use_rotational_diffusion=false
# specify if, for how many steps and with which resolution to save MSDs
brownian.save_msd_every_n_timesteps=10
brownian.msd_size=1000
# number of independent fluorophores on each walker
brownian.n_fluorophores=1
# number of heatup steps for the simulation (done before the actual simulation to get into an equilibrium state)
brownian.heatup_steps=50000
# perform some basic tests of the random walk simulator for the given number of steps and with the given number of walkers
brownian.test_dynamics=true
brownian.test_dynamics.sim_steps=10000
brownian.test_dynamics.walkers=100
# perform some basic tests of the photophysics simulator for the given number of steps and with the given number of walkers
brownian.test_photophysics=false
brownian.test_photophysics.sim_steps=10000
brownian.test_photophysics.walkers=100
# store additional debug/statistics output for dynamics
# This function will average diverse walker statistics over walker_statistics_averageduration seconds and then output
# a datapoint. This will then result in a timeseries of the dynamics. So make sure that walker_statistics_averageduration<simulation.duration
brownian.store_walker_statistics=true
brownian.walker_statistics_averageduration=simulation.duration/300


##################################################################
# setup all fcs objects ("supergroup")
##################################################################
# resolution of the "FCS-data acquisition", i.e. 2*simulation.timestep to accumulate two trajectory timesteps
fcs.corr_taumin=simulation.timestep*2
# setup correlator
fcs.correlator_type=0
fcs.corr_S=20           # number of linear correlators
fcs.corr_m=2            # overlap of two subsequent correlators -> Dt[i+1]=corr_m*Dt[i]
fcs.corr_P=16           # bins per linear correlator
# laser-power for illumination (at peak position in focus)
fcs.P0=150  # laser power in microWatt on circle with r=2*psf_r0
# wavelength of excitation light
fcs.lambda_ex=488  # laser wavelength in nanometers
# excitation volume size
fcs.expsf_r0=0.23*sqrt(2) # 1/e^2 width of excitation volume
fcs.expsf_z0=6*fcs.expsf_r0 # 1/e^2 width of excitation volume
# excitation volume position (0,0,0 = in the center of the sim-box)
fcs.ex_x0=0
fcs.ex_y0=0
fcs.ex_z0=0

# detection volume size
fcs.detpsf_r0=fcs.expsf_r0
fcs.detpsf_z0=fcs.expsf_z0
# position of detection volume
fcs.img_x0=0
fcs.img_y0=0
fcs.img_z0=0
# detection efficiency
fcs.q_det=1
# save binned count-rate with given resolution (also stored in FCS-files)
fcs.save_binning=true
fcs.save_binning_time=max(fcs.corr_taumin, simulation.duration/1000)



##################################################################
# create a brownian-motion trajectory-source object "brownian1"
##################################################################
# Note: all non-mentioned properties either default, or from supergroup "brownian"
# diffusion coefficient in micrometer^2/second
brownian1.diff_coeff=200


##################################################################
# create an FCS trajectory-sinc object "fcs1"
##################################################################
# Note: all non-mentioned properties either default, or from supergroup "fcs"
# sources are the sources of trajectories that are detected by fcs1 ... comma-separated list
fcs1.sources=brownian1
fcs1.detector_type=0
fcs1.q_det=100
fcs1.plot_with=fcs2,fcs3,fcs4,fcs5,fcs6
fcs1.object_name="countingrandomdet_qdet"+floattostr(fcs1.q_det)+"_"


fcs2.sources=brownian1
fcs2.detector_type=2
fcs2.q_det=100
fcs2.object_name="countingnonrandomdet_qdet"+floattostr(fcs2.q_det)+"_"

fcs3.sources=brownian1
fcs3.detector_type=0
fcs3.q_det=1
fcs3.object_name="countingrandomdet_qdet"+floattostr(fcs3.q_det)+"_"


fcs4.sources=brownian1
fcs4.detector_type=2
fcs4.q_det=1
fcs4.object_name="countingnonrandomdet_qdet"+floattostr(fcs4.q_det)+"_"

fcs5.sources=brownian1
fcs5.detector_type=0
fcs5.q_det=10
fcs5.object_name="countingrandomdet_qdet"+floattostr(fcs5.q_det)+"_"



fcs6.sources=brownian1
fcs6.detector_type=2
fcs6.q_det=10
fcs6.object_name="countingnonrandomdet_qdet"+floattostr(fcs6.q_det)+"_"


simulation.basename=tosystempathseparator(".\diffusion4_test\TSIM"+floattostr(simulation.duration)+"_NHEATUP"+floattostr(brownian.heatup_steps)+"\")
